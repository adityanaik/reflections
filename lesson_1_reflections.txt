1) How did viewing a diff between two versions of a file help you see the bug that was introduced?

Using the diff utility was awesome. Didn;t know we could do such a thing in CLI. I'm finding this Git Bash quite interesting. Guess I'm gonna get addicted to this. :D 


2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Yeah, I can see it will help a lot in keeping track of all the changes to the code during the entire software development lifecycle. Kind of excited to try Github. :)


3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros- Since we can control when to commit the changes, we will get to see logical updates to the code.
Cons - There's a posibility that we will forget to commit the changes.


4) Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

May be because Programmer's often need to look at the other related code files.


5) How can you use the commands git log and git diff to view the history of files?

git log for viewing a brief info about all the commits made in a repo.
git diff for comparing the changes between two commits, specially showing the added and removed lines of code.


6) How might using version control make you more confident to make changes that could break something?

Using git checkout we can confidently switch back and forth between different commits, without worrying about losing any important commits. Git stores all the commits.